import logging
import sys
from argparse import REMAINDER, ArgumentParser, RawDescriptionHelpFormatter

from src.apply_fixes.apply_fixes import main

logging.basicConfig(format="%(message)s", level=logging.INFO)


def cli():
    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
        description="""
This script expects that the user has invoked DWYU in the given workspace beforehand and by doing so generated DYWU
report files in the output path.
Running this script multiple times on the same report files will not break anything, but cause a lot of warnings,
since all issues are already fixed. Always execute the DWYU aspect to generate fresh report files before executing
this script.

Beware that there are limits on what buildozer can achieve. Buildozer works on a limited set of information, since
it looks at BUILD files before macro and alias expansion:
- If targets are generated by macros buildozer cannot edit them.
- The DWYU aspect runs after alias expansion and thus reports the actual names instead of the alias names. However,
  only the alias name is visible to buildozer in a BUILD file in the dependencies of a target.

The script expects 'bazel' to be available on PATH.
    """.strip(),
    )
    parser.add_argument(
        "--workspace",
        metavar="PATH",
        help="""
        Workspace for which DWYU reports are gathered and fixes are applied to the source code. If no dedicated
        workspace is provided, we assume we are running from within the workspace for which the DWYU reports have been
        generated and determine the workspace root automatically.
        By default the Bazel output directory containing the DWYU report files is deduced by following the 'bazel-bin'
        convenience symlink.""",
    )
    parser.add_argument(
        "--use-bazel-info",
        const="fastbuild",
        choices=["dbg", "fastbuild", "opt"],
        nargs="?",
        help="""
        Don't follow the convenience symlinks to reach the Bazel output directory containing the DWYU reports. Instead,
        use 'bazel info' to deduce the output directory.
        This option accepts an optional argument specifying the compilation mode which was used to generate the DWYU
        report files.
        Using this option is recommended if the convenience symlinks do not exist, don't follow the default
        naming scheme or do not point to the Bazel output directory containing the DWYU reports.""",
    )
    parser.add_argument(
        "--bazel-bin",
        metavar="PATH",
        help="""
        Path to the bazel-bin directory inside which the DWYU reports are located.
        Using this option is recommended if neither the convenience symlinks nor the 'bazel info' command are suited to
        deduce the Bazel output directory containing the DWYU report files.""",
    )
    parser.add_argument(
        "--add-missing-deps",
        action="store_true",
        help="""
        Given an include is detected which is not provided by a direct dependency, try to find and add the proper
        dependency. This fix is based on heuristics and can fail due to various reasons. Thus, you have to explicitly
        activate it.""",
    )
    parser.add_argument(
        "--buildozer",
        metavar="PATH",
        help="""
        buildozer binary which shall be used by this script. If none is provided, it is expected to find buildozer on
        PATH.""",
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Don't apply fixes. Report the buildozer commands and print the adapted BUILD files to stdout.",
    )
    parser.add_argument("--verbose", action="store_true", help="Announce intermediate steps.")
    parser.add_argument(
        "--buildozer-args",
        nargs=REMAINDER,
        help="Forward arguments to buildozer. Has to be the last option in the command line.",
    )

    return parser.parse_args()


if __name__ == "__main__":
    cli_args = cli()
    sys.exit(main(cli_args))
